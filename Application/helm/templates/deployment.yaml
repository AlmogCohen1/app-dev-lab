kind: Deployment
apiVersion: apps/v1
metadata:
# set your lab user name
  name: {{ .Release.Name }}
spec:
  replicas: {{ .Values.ReplicaNumber }}
  selector:
    matchLabels: 
# set your lab user name
      app: {{ .Release.Name }}
  template:
    metadata:
      labels:
# set your lab user name
        app: {{ .Release.Name }}
    spec:
      volumes:
        - name: index-html
          configMap:
            name: index.html
            defaultMode: 420
      containers:
        - resources: {}
          volumeMounts:
          - name: index-html
            mountPath: {{ .Values.probes.volume.mount.path }}
          readinessProbe:
            httpGet:
              path: {{ .Values.containers.readiness }}
              port: {{ .Values.containers.containerPort  }} # In which port the Application is listening
              scheme: HTTP
           {{- tpl (toYaml .Values.probes.readiness) . | nindent 12 }}
          livenessProbe: 
            httpGet:
              path: {{ .Values.containers.livenesspath }}              
              port: {{ .Values.containers.containerPort }}
              scheme: HTTP
           {{- tpl (toYaml .Values.probes.liveness) . | nindent 12 }}

          # livenessProbe:
          #   httpGet:
          #     path: {{ .Values.probes.liveness.path }}
          #     port: {{ .Values.containers.containerPort }}
          #     scheme: HTTP
          #   initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds }}
          #   timeoutSeconds: {{ .Values.probes.liveness.timeoutSeconds }}
          #   periodSeconds: {{ .Values.probes.liveness.periodSeconds }}
          #   successThreshold: {{ .Values.probes.liveness.successThreshold }}
          #   failureThreshold: {{ .Values.probes.liveness.failureThreshold }}
          env:
            - name: PORT
              value: {{ .Values.containers.containerPort | quote }}
          terminationMessagePath: /dev/termination-log
          name: {{ .Release.Name }}
          ports:
            - containerPort: {{ .Values.containers.containerPort }}
              protocol: TCP
          imagePullPolicy: IfNotPresent
# update with the image you build in part 1
          image: {{ .Values.containers.image }}:{{ .Values.containers.tag }}
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 25%
      maxSurge: 25%
  revisionHistoryLimit: 10